// Code generated by moshi-kotlin-codegen. Do not edit.
@file:Suppress("DEPRECATION", "unused", "UNUSED_PARAMETER", "ClassName", "REDUNDANT_PROJECTION",
    "RedundantExplicitType", "LocalVariableName", "RedundantVisibilityModifier",
    "PLATFORM_CLASS_MAPPED_TO_KOTLIN", "IMPLICIT_NOTHING_TYPE_ARGUMENT_IN_RETURN_POSITION")

package com.example.tp.dtos

import com.squareup.moshi.JsonAdapter
import com.squareup.moshi.JsonReader
import com.squareup.moshi.JsonWriter
import com.squareup.moshi.Moshi
import com.squareup.moshi.Types
import com.squareup.moshi.`internal`.Util
import java.lang.NullPointerException
import kotlin.Double
import kotlin.Int
import kotlin.String
import kotlin.Suppress
import kotlin.collections.List
import kotlin.collections.emptySet
import kotlin.text.buildString

public class CurrentJsonAdapter(
  moshi: Moshi,
) : JsonAdapter<Current>() {
  private val options: JsonReader.Options = JsonReader.Options.of("observation_time", "temperature",
      "weather_code", "weather_icons", "weather_descriptions", "wind_speed", "wind_degree",
      "wind_dir", "pressure", "precip", "humidity", "cloudcover", "feelslike", "uv_index",
      "visibility", "is_day")

  private val stringAdapter: JsonAdapter<String> = moshi.adapter(String::class.java, emptySet(),
      "observationTime")

  private val intAdapter: JsonAdapter<Int> = moshi.adapter(Int::class.java, emptySet(),
      "temperature")

  private val listOfStringAdapter: JsonAdapter<List<String>> =
      moshi.adapter(Types.newParameterizedType(List::class.java, String::class.java), emptySet(),
      "weatherIcons")

  private val doubleAdapter: JsonAdapter<Double> = moshi.adapter(Double::class.java, emptySet(),
      "precip")

  private val nullableStringAdapter: JsonAdapter<String?> = moshi.adapter(String::class.java,
      emptySet(), "isDay")

  override fun toString(): String = buildString(29) {
      append("GeneratedJsonAdapter(").append("Current").append(')') }

  override fun fromJson(reader: JsonReader): Current {
    var observationTime: String? = null
    var temperature: Int? = null
    var weatherCode: Int? = null
    var weatherIcons: List<String>? = null
    var weatherDescriptions: List<String>? = null
    var windSpeed: Int? = null
    var windDegree: Int? = null
    var windDir: String? = null
    var pressure: Int? = null
    var precip: Double? = null
    var humidity: Int? = null
    var cloudcover: Int? = null
    var feelslike: Int? = null
    var uvIndex: Int? = null
    var visibility: Int? = null
    var isDay: String? = null
    reader.beginObject()
    while (reader.hasNext()) {
      when (reader.selectName(options)) {
        0 -> observationTime = stringAdapter.fromJson(reader) ?:
            throw Util.unexpectedNull("observationTime", "observation_time", reader)
        1 -> temperature = intAdapter.fromJson(reader) ?: throw Util.unexpectedNull("temperature",
            "temperature", reader)
        2 -> weatherCode = intAdapter.fromJson(reader) ?: throw Util.unexpectedNull("weatherCode",
            "weather_code", reader)
        3 -> weatherIcons = listOfStringAdapter.fromJson(reader) ?:
            throw Util.unexpectedNull("weatherIcons", "weather_icons", reader)
        4 -> weatherDescriptions = listOfStringAdapter.fromJson(reader) ?:
            throw Util.unexpectedNull("weatherDescriptions", "weather_descriptions", reader)
        5 -> windSpeed = intAdapter.fromJson(reader) ?: throw Util.unexpectedNull("windSpeed",
            "wind_speed", reader)
        6 -> windDegree = intAdapter.fromJson(reader) ?: throw Util.unexpectedNull("windDegree",
            "wind_degree", reader)
        7 -> windDir = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("windDir",
            "wind_dir", reader)
        8 -> pressure = intAdapter.fromJson(reader) ?: throw Util.unexpectedNull("pressure",
            "pressure", reader)
        9 -> precip = doubleAdapter.fromJson(reader) ?: throw Util.unexpectedNull("precip",
            "precip", reader)
        10 -> humidity = intAdapter.fromJson(reader) ?: throw Util.unexpectedNull("humidity",
            "humidity", reader)
        11 -> cloudcover = intAdapter.fromJson(reader) ?: throw Util.unexpectedNull("cloudcover",
            "cloudcover", reader)
        12 -> feelslike = intAdapter.fromJson(reader) ?: throw Util.unexpectedNull("feelslike",
            "feelslike", reader)
        13 -> uvIndex = intAdapter.fromJson(reader) ?: throw Util.unexpectedNull("uvIndex",
            "uv_index", reader)
        14 -> visibility = intAdapter.fromJson(reader) ?: throw Util.unexpectedNull("visibility",
            "visibility", reader)
        15 -> isDay = nullableStringAdapter.fromJson(reader)
        -1 -> {
          // Unknown name, skip it.
          reader.skipName()
          reader.skipValue()
        }
      }
    }
    reader.endObject()
    return Current(
        observationTime = observationTime ?: throw Util.missingProperty("observationTime",
            "observation_time", reader),
        temperature = temperature ?: throw Util.missingProperty("temperature", "temperature",
            reader),
        weatherCode = weatherCode ?: throw Util.missingProperty("weatherCode", "weather_code",
            reader),
        weatherIcons = weatherIcons ?: throw Util.missingProperty("weatherIcons", "weather_icons",
            reader),
        weatherDescriptions = weatherDescriptions ?:
            throw Util.missingProperty("weatherDescriptions", "weather_descriptions", reader),
        windSpeed = windSpeed ?: throw Util.missingProperty("windSpeed", "wind_speed", reader),
        windDegree = windDegree ?: throw Util.missingProperty("windDegree", "wind_degree", reader),
        windDir = windDir ?: throw Util.missingProperty("windDir", "wind_dir", reader),
        pressure = pressure ?: throw Util.missingProperty("pressure", "pressure", reader),
        precip = precip ?: throw Util.missingProperty("precip", "precip", reader),
        humidity = humidity ?: throw Util.missingProperty("humidity", "humidity", reader),
        cloudcover = cloudcover ?: throw Util.missingProperty("cloudcover", "cloudcover", reader),
        feelslike = feelslike ?: throw Util.missingProperty("feelslike", "feelslike", reader),
        uvIndex = uvIndex ?: throw Util.missingProperty("uvIndex", "uv_index", reader),
        visibility = visibility ?: throw Util.missingProperty("visibility", "visibility", reader),
        isDay = isDay
    )
  }

  override fun toJson(writer: JsonWriter, value_: Current?) {
    if (value_ == null) {
      throw NullPointerException("value_ was null! Wrap in .nullSafe() to write nullable values.")
    }
    writer.beginObject()
    writer.name("observation_time")
    stringAdapter.toJson(writer, value_.observationTime)
    writer.name("temperature")
    intAdapter.toJson(writer, value_.temperature)
    writer.name("weather_code")
    intAdapter.toJson(writer, value_.weatherCode)
    writer.name("weather_icons")
    listOfStringAdapter.toJson(writer, value_.weatherIcons)
    writer.name("weather_descriptions")
    listOfStringAdapter.toJson(writer, value_.weatherDescriptions)
    writer.name("wind_speed")
    intAdapter.toJson(writer, value_.windSpeed)
    writer.name("wind_degree")
    intAdapter.toJson(writer, value_.windDegree)
    writer.name("wind_dir")
    stringAdapter.toJson(writer, value_.windDir)
    writer.name("pressure")
    intAdapter.toJson(writer, value_.pressure)
    writer.name("precip")
    doubleAdapter.toJson(writer, value_.precip)
    writer.name("humidity")
    intAdapter.toJson(writer, value_.humidity)
    writer.name("cloudcover")
    intAdapter.toJson(writer, value_.cloudcover)
    writer.name("feelslike")
    intAdapter.toJson(writer, value_.feelslike)
    writer.name("uv_index")
    intAdapter.toJson(writer, value_.uvIndex)
    writer.name("visibility")
    intAdapter.toJson(writer, value_.visibility)
    writer.name("is_day")
    nullableStringAdapter.toJson(writer, value_.isDay)
    writer.endObject()
  }
}
