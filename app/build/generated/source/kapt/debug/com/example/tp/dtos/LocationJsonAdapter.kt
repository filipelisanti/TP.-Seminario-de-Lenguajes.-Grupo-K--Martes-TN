// Code generated by moshi-kotlin-codegen. Do not edit.
@file:Suppress("DEPRECATION", "unused", "UNUSED_PARAMETER", "ClassName", "REDUNDANT_PROJECTION",
    "RedundantExplicitType", "LocalVariableName", "RedundantVisibilityModifier",
    "PLATFORM_CLASS_MAPPED_TO_KOTLIN", "IMPLICIT_NOTHING_TYPE_ARGUMENT_IN_RETURN_POSITION")

package com.example.tp.dtos

import com.squareup.moshi.JsonAdapter
import com.squareup.moshi.JsonReader
import com.squareup.moshi.JsonWriter
import com.squareup.moshi.Moshi
import com.squareup.moshi.`internal`.Util
import java.lang.NullPointerException
import kotlin.Long
import kotlin.String
import kotlin.Suppress
import kotlin.collections.emptySet
import kotlin.text.buildString

public class LocationJsonAdapter(
  moshi: Moshi,
) : JsonAdapter<Location>() {
  private val options: JsonReader.Options = JsonReader.Options.of("name", "country", "region",
      "lat", "lon", "timezone_id", "localtime", "localtime_epoch", "utc_offset")

  private val stringAdapter: JsonAdapter<String> = moshi.adapter(String::class.java, emptySet(),
      "name")

  private val longAdapter: JsonAdapter<Long> = moshi.adapter(Long::class.java, emptySet(),
      "localtimeEpoch")

  override fun toString(): String = buildString(30) {
      append("GeneratedJsonAdapter(").append("Location").append(')') }

  override fun fromJson(reader: JsonReader): Location {
    var name: String? = null
    var country: String? = null
    var region: String? = null
    var lat: String? = null
    var lon: String? = null
    var timezoneId: String? = null
    var localtime: String? = null
    var localtimeEpoch: Long? = null
    var utcOffset: String? = null
    reader.beginObject()
    while (reader.hasNext()) {
      when (reader.selectName(options)) {
        0 -> name = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("name", "name",
            reader)
        1 -> country = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("country",
            "country", reader)
        2 -> region = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("region",
            "region", reader)
        3 -> lat = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("lat", "lat", reader)
        4 -> lon = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("lon", "lon", reader)
        5 -> timezoneId = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("timezoneId",
            "timezone_id", reader)
        6 -> localtime = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("localtime",
            "localtime", reader)
        7 -> localtimeEpoch = longAdapter.fromJson(reader) ?:
            throw Util.unexpectedNull("localtimeEpoch", "localtime_epoch", reader)
        8 -> utcOffset = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("utcOffset",
            "utc_offset", reader)
        -1 -> {
          // Unknown name, skip it.
          reader.skipName()
          reader.skipValue()
        }
      }
    }
    reader.endObject()
    return Location(
        name = name ?: throw Util.missingProperty("name", "name", reader),
        country = country ?: throw Util.missingProperty("country", "country", reader),
        region = region ?: throw Util.missingProperty("region", "region", reader),
        lat = lat ?: throw Util.missingProperty("lat", "lat", reader),
        lon = lon ?: throw Util.missingProperty("lon", "lon", reader),
        timezoneId = timezoneId ?: throw Util.missingProperty("timezoneId", "timezone_id", reader),
        localtime = localtime ?: throw Util.missingProperty("localtime", "localtime", reader),
        localtimeEpoch = localtimeEpoch ?: throw Util.missingProperty("localtimeEpoch",
            "localtime_epoch", reader),
        utcOffset = utcOffset ?: throw Util.missingProperty("utcOffset", "utc_offset", reader)
    )
  }

  override fun toJson(writer: JsonWriter, value_: Location?) {
    if (value_ == null) {
      throw NullPointerException("value_ was null! Wrap in .nullSafe() to write nullable values.")
    }
    writer.beginObject()
    writer.name("name")
    stringAdapter.toJson(writer, value_.name)
    writer.name("country")
    stringAdapter.toJson(writer, value_.country)
    writer.name("region")
    stringAdapter.toJson(writer, value_.region)
    writer.name("lat")
    stringAdapter.toJson(writer, value_.lat)
    writer.name("lon")
    stringAdapter.toJson(writer, value_.lon)
    writer.name("timezone_id")
    stringAdapter.toJson(writer, value_.timezoneId)
    writer.name("localtime")
    stringAdapter.toJson(writer, value_.localtime)
    writer.name("localtime_epoch")
    longAdapter.toJson(writer, value_.localtimeEpoch)
    writer.name("utc_offset")
    stringAdapter.toJson(writer, value_.utcOffset)
    writer.endObject()
  }
}
