// Code generated by moshi-kotlin-codegen. Do not edit.
@file:Suppress("DEPRECATION", "unused", "UNUSED_PARAMETER", "ClassName", "REDUNDANT_PROJECTION",
    "RedundantExplicitType", "LocalVariableName", "RedundantVisibilityModifier",
    "PLATFORM_CLASS_MAPPED_TO_KOTLIN", "IMPLICIT_NOTHING_TYPE_ARGUMENT_IN_RETURN_POSITION")

package com.example.tp.dtos

import com.squareup.moshi.JsonAdapter
import com.squareup.moshi.JsonReader
import com.squareup.moshi.JsonWriter
import com.squareup.moshi.Moshi
import com.squareup.moshi.`internal`.Util
import java.lang.NullPointerException
import kotlin.String
import kotlin.Suppress
import kotlin.collections.emptySet
import kotlin.text.buildString

public class PostDTOJsonAdapter(
  moshi: Moshi,
) : JsonAdapter<PostDTO>() {
  private val options: JsonReader.Options = JsonReader.Options.of("request", "location", "current")

  private val requestAdapter: JsonAdapter<Request> = moshi.adapter(Request::class.java, emptySet(),
      "request")

  private val locationAdapter: JsonAdapter<Location> = moshi.adapter(Location::class.java,
      emptySet(), "location")

  private val currentAdapter: JsonAdapter<Current> = moshi.adapter(Current::class.java, emptySet(),
      "current")

  override fun toString(): String = buildString(29) {
      append("GeneratedJsonAdapter(").append("PostDTO").append(')') }

  override fun fromJson(reader: JsonReader): PostDTO {
    var request: Request? = null
    var location: Location? = null
    var current: Current? = null
    reader.beginObject()
    while (reader.hasNext()) {
      when (reader.selectName(options)) {
        0 -> request = requestAdapter.fromJson(reader) ?: throw Util.unexpectedNull("request",
            "request", reader)
        1 -> location = locationAdapter.fromJson(reader) ?: throw Util.unexpectedNull("location",
            "location", reader)
        2 -> current = currentAdapter.fromJson(reader) ?: throw Util.unexpectedNull("current",
            "current", reader)
        -1 -> {
          // Unknown name, skip it.
          reader.skipName()
          reader.skipValue()
        }
      }
    }
    reader.endObject()
    return PostDTO(
        request = request ?: throw Util.missingProperty("request", "request", reader),
        location = location ?: throw Util.missingProperty("location", "location", reader),
        current = current ?: throw Util.missingProperty("current", "current", reader)
    )
  }

  override fun toJson(writer: JsonWriter, value_: PostDTO?) {
    if (value_ == null) {
      throw NullPointerException("value_ was null! Wrap in .nullSafe() to write nullable values.")
    }
    writer.beginObject()
    writer.name("request")
    requestAdapter.toJson(writer, value_.request)
    writer.name("location")
    locationAdapter.toJson(writer, value_.location)
    writer.name("current")
    currentAdapter.toJson(writer, value_.current)
    writer.endObject()
  }
}
