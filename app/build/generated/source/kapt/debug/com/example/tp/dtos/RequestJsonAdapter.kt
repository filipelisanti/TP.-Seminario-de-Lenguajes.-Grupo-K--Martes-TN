// Code generated by moshi-kotlin-codegen. Do not edit.
@file:Suppress("DEPRECATION", "unused", "UNUSED_PARAMETER", "ClassName", "REDUNDANT_PROJECTION",
    "RedundantExplicitType", "LocalVariableName", "RedundantVisibilityModifier",
    "PLATFORM_CLASS_MAPPED_TO_KOTLIN", "IMPLICIT_NOTHING_TYPE_ARGUMENT_IN_RETURN_POSITION")

package com.example.tp.dtos

import com.squareup.moshi.JsonAdapter
import com.squareup.moshi.JsonReader
import com.squareup.moshi.JsonWriter
import com.squareup.moshi.Moshi
import com.squareup.moshi.`internal`.Util
import java.lang.NullPointerException
import kotlin.String
import kotlin.Suppress
import kotlin.collections.emptySet
import kotlin.text.buildString

public class RequestJsonAdapter(
  moshi: Moshi,
) : JsonAdapter<Request>() {
  private val options: JsonReader.Options = JsonReader.Options.of("type", "query", "language",
      "unit")

  private val stringAdapter: JsonAdapter<String> = moshi.adapter(String::class.java, emptySet(),
      "type")

  override fun toString(): String = buildString(29) {
      append("GeneratedJsonAdapter(").append("Request").append(')') }

  override fun fromJson(reader: JsonReader): Request {
    var type: String? = null
    var query: String? = null
    var language: String? = null
    var unit: String? = null
    reader.beginObject()
    while (reader.hasNext()) {
      when (reader.selectName(options)) {
        0 -> type = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("type", "type",
            reader)
        1 -> query = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("query", "query",
            reader)
        2 -> language = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("language",
            "language", reader)
        3 -> unit = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("unit", "unit",
            reader)
        -1 -> {
          // Unknown name, skip it.
          reader.skipName()
          reader.skipValue()
        }
      }
    }
    reader.endObject()
    return Request(
        type = type ?: throw Util.missingProperty("type", "type", reader),
        query = query ?: throw Util.missingProperty("query", "query", reader),
        language = language ?: throw Util.missingProperty("language", "language", reader),
        unit = unit ?: throw Util.missingProperty("unit", "unit", reader)
    )
  }

  override fun toJson(writer: JsonWriter, value_: Request?) {
    if (value_ == null) {
      throw NullPointerException("value_ was null! Wrap in .nullSafe() to write nullable values.")
    }
    writer.beginObject()
    writer.name("type")
    stringAdapter.toJson(writer, value_.type)
    writer.name("query")
    stringAdapter.toJson(writer, value_.query)
    writer.name("language")
    stringAdapter.toJson(writer, value_.language)
    writer.name("unit")
    stringAdapter.toJson(writer, value_.unit)
    writer.endObject()
  }
}
